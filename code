class Solution
{
    public:
    
    pair<bool,int> SumTree(Node *root){
        //base case1 --- if tree is empty
         if(root==NULL){
             pair<bool,int>p=make_pair(true, 0);
             return p;
         }
         
         //base case2 ---if leaf tree
         if(root->left==NULL && root->right==NULL){
             pair<bool,int>p=make_pair(true, root->data);
             return p;
         }
         
         pair<bool, int> left=SumTree(root->left);
         pair<bool, int> right=SumTree(root->right);
         //to check if both subtree are sum tree or not
         bool isleftSumTree=left.first;
         bool isrightSumTree=right.first;
         int leftsum=left.second;
         int rightsum=right.second;
         bool compare=root->data==leftsum+rightsum;
         
         pair<bool,int> ans;
         if(isleftSumTree && isrightSumTree && compare){
             ans.first=true;
             ans.second=root->data+leftsum+rightsum;
         }
         else{
             ans.first=false;
         }
         return ans;
    }
    
    
    bool isSumTree(Node* root)
    {
        return SumTree(root).first;
    }
};
